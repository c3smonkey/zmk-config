/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layers

#define L1 0
#define L2 1
#define Fn 2

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        buetooth-0 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <1 13>;
            layers = <2>;
        };

        bluetooth-2 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <14 2>;
            layers = <2>;
        };

        buetooth-3 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <15 3>;
            layers = <2>;
        };

        bluetooth-4 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <4 16>;
            layers = <2>;
        };

        bluetooth-5 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <5 17>;
            layers = <2>;
        };

        bluetooth-clear {
            bindings = <&bt BT_CLR>;
            key-positions = <2 3>;
            layers = <2>;
        };

        L_paranthesis {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 28>;
            layers = <0>;
        };

        R_paranthesis {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <17 29>;
            layers = <0>;
        };

        L_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <19 31>;
        };

        R_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <32 20>;
        };

        L_bracket {
            bindings = <&kp LS(LEFT_BRACKET)>;
            key-positions = <19 31>;
        };

        R_bracket {
            bindings = <&kp LS(RIGHT_BRACKET)>;
            key-positions = <20 32>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        layer_base {
            label = "Base";
            bindings = <
&kp ESC        &kp Q        &kp W       &kp E       &kp R            &kp T     &kp Y   &kp U      &kp I           &kp O         &kp P                    &kp EXCLAMATION
&kp BACKSPACE  &kp A        &kp S       &kp D       &kp F            &kp G     &kp H   &kp J      &kp K           &kp L         &kp SEMI                 &kp ENTER
&mo Fn         &mt LCTRL Z  &mt LALT X  &mt LCMD C  &kp V            &kp B     &kp N   &kp M      &mt RCMD COMMA  &mt RALT DOT  &mt RIGHT_CONTROL SLASH  &mo Fn
                                        &kp TAB     &mt LSHFT SPACE  &mo L2    &mo L2  &kp RSHFT  &kp GRAVE
            >;
        };

        layer_number {
            label = "Number";
            bindings = <
&trans  &kp EXCL      &kp AT       &kp HASH     &kp DLLR  &kp PRCNT    &kp CARET       &kp AMPS       &kp KP_MULTIPLY          &kp LPAR  &kp RPAR  &kp BSLH
&trans  &kp N1        &kp N2       &kp N3       &kp N4    &kp N5       &kp MINUS       &kp EQUAL      &kp GRAVE                &kp LBKT  &kp RBKT  &kp PIPE
&trans  &mt LCTRL N6  &mt LALT N7  &mt LCMD N8  &kp N9    &kp N0       &mt RCMD UNDER  &mt RALT PLUS  &mt RIGHT_CONTROL TILDE  &kp LBRC  &kp RBRC  &kp RSHFT
                                   &trans       &trans    &trans       &trans          &trans         &trans
            >;
        };

        layer_function {
            label = "Function";
            bindings = <
&trans  &kp C_PREV    &kp C_NEXT   &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PP    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4       &bt BT_CLR
&trans  &kp F1        &kp F2       &kp F3        &kp F4        &kp F5      &kp LEFT      &kp DOWN      &kp UP        &kp RIGHT     &trans             &trans
&trans  &mt LCTRL F6  &mt LALT F7  &mt LCMD F8   &kp F9        &kp F10     &trans        &trans        &kp RCMD      &kp RALT      &kp RIGHT_CONTROL  &trans
                                   &trans        &trans        &trans      &trans        &trans
            >;
        };
    };
};
